#!/usr/bin/env bash

##
# ./bootstrap
# - Installs and configures up a local development environment on MacOS.
##

set -e

# ensure we include Homebrew and its installed binaries in $PATH, if installed
HOMEBREW_PATH=/usr/local/bin
CURRENT_PATH=$PATH
if [[ :$CURRENT_PATH: != *:"$HOMEBREW_PATH":* ]]; then
  PATH=$CURRENT_PATH:$HOMEBREW_PATH
fi

SCRIPT_PATH="$(cd "$(dirname "$0")" >/dev/null 2>&1; pwd -P)"
NEOVIM_CONFIG_PATH=~/.config/nvim

STYLE_RESET=$(printf '\e[0m')
STYLE_BOLD=$(printf '\e[1m')
STYLE_HEADER=$(printf '\e[1;97m')
STYLE_SUBHEADER=$(printf '\e[1;36m')
STYLE_PARAGRAPH=$(printf '\e[2m')

POST_SHELL_SETUP_MESSAGE="Now go ahead and add what you need from $SCRIPT_PATH/.zshrc to ~/.zshrc (see the \"User configuration\" part specifically)."

function printHeader {
  echo -e "${STYLE_RESET}\n${STYLE_HEADER}$1${STYLE_RESET}"
}

function printSubheader {
  echo -e "${STYLE_RESET}\n${STYLE_HEADER}▸${STYLE_RESET} ${STYLE_SUBHEADER}$1${STYLE_RESET}"
}

function printParagraph {
  echo -e "${STYLE_RESET}  ${STYLE_PARAGRAPH}$1${STYLE_RESET}"
}

function ensureBareMinimumPATH {
  if [[ :$PATH: != *:"$HOMEBREW_PATH":* ]]; then
    # this will likely get modified by user from ~/.zshrc later
    # but it's to ensure that some bare minimum paths are added
    echo "
# Added by bootstrap script to ensure some directories are added to \$PATH.
# Most likely you will want to modify this when you add your own .zshrc config.
export PATH=\$PATH:$HOMEBREW_PATH" >> ~/.zshrc
  fi
}

function showError {
  echo "$1" 1>&2
  exit 1
}

function showInfo {
  echo -e "${STYLE_RESET}${STYLE_BOLD}./$(basename $0)${STYLE_RESET}"
  echo "Installs and configures up a local development environment."
}

function bootstrap {
  printHeader "☕️ Bootstrapping work environment..."

  printSubheader "MacOS Command Line Tools"
  logFile="/tmp/cmdline-tools-install.$(date +%s)"
  xcode-select --install &> $logFile || true
  if [[ "$(cat $logFile)" == *"already installed"* ]]; then
    printParagraph "Command Line Tools appears to be already installed"
  fi
  rm $logFile

  printSubheader "Homebrew"
  if [[ ! "$(command -v brew)" ]]; then
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  else
    printParagraph "\`brew\` appears to be already installed, at $(which brew)"
  fi

  printSubheader "zsh"
  if [[ ! "$(command -v zsh)" ]]; then
    brew install zsh
  else
    printParagraph "\`zsh\` appears to be already installed, at $(which zsh)"
  fi

  printSubheader "Oh My Zsh"
  export RUNZSH="no"  # don't switch to zsh directly after installation
  if [[ ! -d ~/.oh-my-zsh ]]; then
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  elif [[ "$SHELL" != "$(which zsh)" ]]; then
    printParagraph "Oh My Zsh appears to be already installed but \$SHELL ($SHELL) is not set to $(which zsh) for current user. Changing it!"
    chsh -s $(which zsh) $(whoami)
  else
    printParagraph "Oh My Zsh appears to be already installed"
  fi
  if [[ ! -f ~/.zshrc ]]; then
    printParagraph "No ~/.zshrc found!"
    printParagraph "- using the whole of $SCRIPT_PATH/.zshrc as ~/.zshrc"
    cp $SCRIPT_PATH/.zshrc ~/.zshrc
  fi
  if [[ ! -L ~/.zshenv ]]; then
    # some interfaces (e.g. VimR) won't source ~/.zshrc, but it will source ~/.zshenv
    # - see https://stackoverflow.com/questions/11415428/terminal-vim-not-loading-zshrc#comment81558730_34049730
    ln -s ~/.zshrc ~/.zshenv
  fi
  echo
  printParagraph "Oh My Zsh installation completed!"
  printParagraph "$POST_SHELL_SETUP_MESSAGE"
  unset RUNZSH

  printSubheader "fzf"
  if [[ ! "$(command -v fzf)" ]]; then
    brew install fzf
  else
    printParagraph "\`fzf\` appears to be installed, at $(which fzf)"
  fi

  printSubheader "ctags"
  if [[ ! "$(brew ls --versions ctags)" ]]; then
    # we want the one from Homebrew since .zshrc references that
    brew install ctags
  else
    printParagraph "\`ctags\` appears to be already installed, at $(brew --prefix ctags)"
  fi

  printSubheader "ripgrep"
  if [[ ! "$(command -v rg)" ]]; then
    brew install ripgrep
  else
    printParagraph "\`rg\` appears to be already installed, at $(which rg)"
  fi

  printSubheader "Neovim"
  [[ ! -d $NEOVIM_CONFIG_PATH ]] && mkdir -p $NEOVIM_CONFIG_PATH
  if [[ ! "$(command -v nvim)" ]]; then
    brew install neovim
  else
    printParagraph "\`nvim\` appears to be already installed, at $(which nvim)"
  fi

  printSubheader "Fonts for custom characters"
  if [[ ! "$(brew cask ls --versions font-hack-nerd-font)" ]]; then
    brew tap homebrew/cask-fonts
    brew cask install font-hack-nerd-font
  else
    printParagraph "\`font-hack-nerd-font\` appears to be already installed"
  fi

  printSubheader "Neovim plugin manager and plugins"
  [[ -d $NEOVIM_CONFIG_PATH/plugged ]] && rm -rf $NEOVIM_CONFIG_PATH/plugged
  cp -r $SCRIPT_PATH/nvim $NEOVIM_CONFIG_PATH/../
  [[ -d $NEOVIM_CONFIG_PATH/plugged ]] && rm -rf $NEOVIM_CONFIG_PATH/plugged
  printParagraph "Installing in Neovim..."
  sleep 3
  $(brew --prefix neovim)/bin/nvim -c 'PlugInstall|qa'
  $(brew --prefix neovim)/bin/nvim -c 'CocUpdateSync|qa'

  echo
  printSubheader "Node Version Manager"
  if [[ ! -d "$HOME/.nvm" ]]; then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
  else
    printParagraph "\`nvm\` appears to be already installed"
  fi
  export NVM_DIR="$HOME/.nvm"  # should also be in ~/.zshrc
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # should also be in ~/.zshrc

  printSubheader "Node.js"
  if [[ "$(command -v node)" != "" ]]; then
    printParagraph "\`node\` appears to be already installed, at $(which node)"
  elif [[ "$(command -v nodejs)" != "" ]]; then
    printParagraph "\`nodejs\` appears to be already installed, at $(which nodejs)"
  else
    printParagraph "Installing latest LTS version of Node.js"
    nvm install --lts --latest-npm
  fi

  printSubheader "pyenv"
  if [[ ! "$(command -v pyenv)" ]]; then
    brew install pyenv
  else
    printParagraph "\`pyenv\` appears to be already installed, at $(which pyenv)"
  fi

  printSubheader "Python 3"
  if [[ ! "$(command -v python3)" ]]; then
    latestPython3Version="$(pyenv install --list | awk '{print $1}' | grep '^[0-9]' | grep '\.[0-9]$' | grep '^3\.' | tail -1)"
    printParagraph "Installing latest version of Python 3 ($latestPython3Version)"
    pyenv install $latestPython3Version
  else
    printParagraph "\`python3\` appears to be already installed, at $(which python3)"
  fi

  printSubheader "pipenv"
  if [[ ! "$(command -v pipenv)" ]]; then
    brew install pipenv
  else
    printParagraph "\`pipenv\` appears to be already installed, at $(which pipenv)"
  fi

  printSubheader "VimR"
  if [[ ! "$(command -v vimr)" ]]; then
    brew install vimr
  else
    printParagraph "\`vimr\` appears to be already installed, at $(which vimr)"
  fi

  printSubheader "GitHub CLI"
  if [[ ! "$(brew ls --versions hub)" ]]; then
    brew install hub
  else
    printParagraph "\`hub\` appears to be already installed, at $(which hub)"
  fi

  printSubheader "Global Git configuration"
  if [[ ! -f ~/.gitignore ]]; then
    printParagraph "Adding .gitignore"
    cp $SCRIPT_PATH/.gitignore_global ~/.gitignore_global
  else
    printParagraph "~/.gitignore already exists"
  fi
  if [[ ! -f ~/.gitconfig ]]; then
    printParagraph "Adding .gitconfig"
    cp $SCRIPT_PATH/.gitconfig_global ~/.gitconfig
  else
    printParagraph "~/.gitconfig already exists"
  fi
  if [[ "$(git config --global user.name)" == "" ]]; then
    printf "\n  Full name to use for Git: "
    read globalGitUserName
    git config --global user.name "$globalGitUserName"
  fi
  if [[ "$(git config --global user.email)" == "" ]]; then
    printf "\n  Email address to use for Git: "
    read globalGitUserEmailAddress
    git config --global user.email "$globalGitUserEmailAddress"
  fi

  if [[ :$CURRENT_PATH: != *:"$HOMEBREW_PATH":* ]]; then
    # this will likely get modified by user from ~/.zshrc later
    # but it's to ensure that some bare minimum paths are added
    echo "
# Added by bootstrap script to ensure some directories are added to \$PATH.
# Most likely you will want to modify this when you add your own .zshrc config.
export PATH=\$PATH:$HOMEBREW_PATH" >> ~/.zshrcalsdjkf
  fi

  tput bel
  printHeader "🎉  All done!"
  echo "    $POST_SHELL_SETUP_MESSAGE"
  echo
  read -p "Press Enter to activate new environment"
  echo

  exec zsh -l
}

function main {
  # parse arguments
  while [ $# -gt 0 ]; do
    case $1 in
      --help) showInfo; exit;;
      -h) showInfo; exit;;
      *) showError "Invalid option $1";;
    esac
    shift
  done

  echo "About to bootstrap development environment."
  read -p "Press Enter to continue"
  bootstrap
}

main "$@"
